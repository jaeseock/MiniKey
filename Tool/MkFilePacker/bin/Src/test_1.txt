#ifndef __BOSSAM_CORE_BSFILEMANAGER_H__
#define __BOSSAM_CORE_BSFILEMANAGER_H__


//------------------------------------------------------------------------------------------------//
// global instance - file manager
//
// BsFilePack 기반 패킹 시스템을 포함한 파일 관리
// 사용 편의성을 위해 약간의 제한 존재(자유도를 원한다면 BsFilePack을 사용해 직접 구성)
// - 하나의 어플리케이션은 하나의 패킹 시스템만 사용
// - chunk file들의 위치는 root directory와 동일
// - 최초 패킹, 파일 조작, 추출 등은 예외적인 케이스이므로 지원하지 않고 사용에만 집중
//
// (주의!!!) 객체 생성 이전 chunk file들이 존재하는 root directory가 세팅되어 있어야 함(BsPathName::SetUp())
//
// BsFileManager 객체가 존재하지 않을 수도 있으므로 직접 객체를 호출하지 않고 static api를 사용해 간접 접근
//
// 파일 참조시 실제 경로 우선. 실제 경로에 없다면 패킹 시스템을 참조해 반환
// BsFileManager 객체가 존재하지 않을 경우 실제 경로만 대상으로 함
//
// 생성(초기화)/삭제를 제외하면 어떠한 파일/내부값도 변경시키지 않고 읽기만 수행하므로 객체 생성/삭제는
// 단 한번씩, 단 한 스레드에서만 실행된다고 가정하고 thread 이슈는 신경쓰지 않음
//------------------------------------------------------------------------------------------------//

#include "BsCore_BsManagedSingletonPattern.h"
#include "BsCore_BsFilePack.h"


class BsFileManager : public BsManagedSingletonPattern<BsFileManager>
{
public:

	//------------------------------------------------------------------------------------------------//

	// 실제 경로 혹은 패키징 시스템 내의 파일 데이터 반환
	// (in) filePath : 절대, 혹은 root directory 기준 상대 파일 경로
	// (out) buffer : 데이터가 담길 버퍼
	// return : 성공 여부
	// (주의!!!) 파일 크기가 0이더라도 파일이 존재하면 true 반환
	static bool GetFileData(const BsPathName& filePath, BsMemoryBlock& buffer);

	//------------------------------------------------------------------------------------------------//
	// implementation
	//------------------------------------------------------------------------------------------------//

	static bool __GetFileDataInRealPath(const BsPathName& filePath, BsMemoryBlock& buffer);

	bool __GetOriginalFileData(const BsPathName& filePath, BsMemoryBlock& buffer) const;

	BsFileManager(); // 패킹 시스템 설정 수정을 원할 경우 여기서 수정
	virtual ~BsFileManager() { m_FilePack.Clear(); }

protected:

	BsFilePack m_FilePack;
};

#endif
